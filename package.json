{
  "name": "sqli-detection-microservices",
  "version": "1.0.0",
  "description": "TypeScript microservices project with MCP server, LangChain RAG, and SQL injection detection",
  "main": "dist/index.js",
  "scripts": {
    "build": "tsc",
    "start": "node dist/apps/index.js",
    "dev": "nodemon --exec ts-node apps/index.ts",
    "mcp:start": "ts-node --transpile-only apps/mcp-server/index.ts",
    "mcp:inspect": "npx @modelcontextprotocol/inspector ts-node --transpile-only apps/mcp-server/index.ts",
    "mcp:inspect:prod": "npm run build && npx @modelcontextprotocol/inspector node dist/apps/mcp-server/index.js",
    "mcp:inspect:env": "npx @modelcontextprotocol/inspector -e SQLI_API_URL=http://localhost:3001 -e NODE_ENV=production -e DEBUG=false ts-node --transpile-only apps/mcp-server/index.ts",
    "api:start": "ts-node --transpile-only apps/sqli-detection-api/src/main.ts",
    "rag:start": "ts-node --transpile-only apps/langchain-rag/src/main.ts",
    "dev:status": "bash dev-ports.sh status",
    "dev:kill-api": "bash dev-ports.sh kill 3001",
    "dev:kill-rag": "bash dev-ports.sh kill 3002",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "prisma:generate": "prisma generate",
    "prisma:migrate": "prisma migrate dev",
    "prisma:studio": "prisma studio",
    "docker:build": "docker-compose build",
    "docker:up": "docker-compose up -d",
    "docker:down": "docker-compose down",
    "k8s:deploy": "kubectl apply -f infrastructure/k8s/",
    "k8s:delete": "kubectl delete -f infrastructure/k8s/",
    "db:create": "createdb -h localhost -U postgres sqli_detection",
    "db:init": "psql -h localhost -U postgres -d sqli_detection -f infrastructure/database/init.sql",
    "db:connect": "psql -h localhost -U postgres -d sqli_detection",
    "db:reset": "dropdb -h localhost -U postgres sqli_detection --if-exists && npm run db:create && npm run db:init",
    "db:docker:up": "docker-compose up postgres -d",
    "db:docker:down": "docker-compose down postgres",
    "db:docker:logs": "docker-compose logs postgres",
    "db:docker:shell": "docker-compose exec postgres psql -U postgres -d sqli_detection",
    "db:docker:reset": "docker-compose down postgres && docker volume rm test_sqli_postgres_data && npm run db:docker:up",
    "db:status": "docker-compose exec postgres pg_isready -U postgres",
    "db:backup": "docker-compose exec postgres pg_dump -U postgres sqli_detection > backup.sql",
    "db:restore": "docker-compose exec postgres psql -U postgres -d sqli_detection < backup.sql",
    "n8n:setup": "cd n8n && bash setup-demo.sh",
    "n8n:start": "cd n8n && docker-compose -f docker-compose.n8n.yml up -d",
    "n8n:stop": "cd n8n && docker-compose -f docker-compose.n8n.yml down",
    "n8n:logs": "cd n8n && docker-compose -f docker-compose.n8n.yml logs -f n8n",
    "n8n:test": "cd n8n && node test-demo.js",
    "n8n:demo": "cd n8n && bash setup-demo.sh --test",
    "n8n:reset": "cd n8n && docker-compose -f docker-compose.n8n.yml down -v && docker-compose -f docker-compose.n8n.yml up -d",
    "n8n:test-webhooks": "bash scripts/test-n8n-webhooks.sh",
    "demo:complete": "bash scripts/complete-demo-setup.sh",
    "demo:test": "bash scripts/complete-demo-setup.sh --test",
    "demo:simple": "bash scripts/simple-demo-test.sh"
  },
  "keywords": [
    "typescript",
    "microservices",
    "mcp",
    "langchain",
    "sql-injection",
    "nestjs",
    "prisma",
    "docker",
    "kubernetes"
  ],
  "author": "",
  "license": "ISC",
  "type": "commonjs",
  "devDependencies": {
    "@nestjs/testing": "^11.1.6",
    "@types/jest": "^30.0.0",
    "@types/node": "^24.2.1",
    "@types/supertest": "^6.0.3",
    "compression": "^1.8.1",
    "cors": "^2.8.5",
    "express": "^5.1.0",
    "express-rate-limit": "^8.0.1",
    "helmet": "^8.1.0",
    "jest": "^30.0.5",
    "nodemon": "^3.1.10",
    "reflect-metadata": "^0.2.2",
    "rxjs": "^7.8.2",
    "supertest": "^7.1.4",
    "ts-jest": "^29.4.1",
    "ts-node": "^10.9.2",
    "typescript": "^5.9.2"
  },
  "dependencies": {
    "@langchain/community": "^0.3.50",
    "@langchain/openai": "^0.6.7",
    "@langchain/pinecone": "^0.2.0",
    "@modelcontextprotocol/sdk": "^1.17.2",
    "@nestjs/common": "^11.1.6",
    "@nestjs/config": "^4.0.2",
    "@nestjs/core": "^11.1.6",
    "@nestjs/platform-express": "^11.1.6",
    "@nestjs/swagger": "^11.2.0",
    "@nestjs/terminus": "^11.0.0",
    "@prisma/client": "^6.13.0",
    "@types/multer": "^2.0.0",
    "axios": "^1.11.0",
    "class-transformer": "^0.5.1",
    "class-validator": "^0.14.2",
    "crypto": "^1.0.1",
    "langchain": "^0.3.30",
    "multer": "^2.0.2",
    "prisma": "^6.13.0",
    "prom-client": "^15.1.3",
    "swagger-ui-express": "^5.0.1",
    "zod": "^3.25.76"
  },
  "jest": {
    "moduleFileExtensions": [
      "js",
      "json",
      "ts"
    ],
    "rootDir": ".",
    "testRegex": ".*\\.spec\\.ts$",
    "transform": {
      "^.+\\.(t|j)s$": "ts-jest"
    },
    "collectCoverageFrom": [
      "apps/**/*.(t|j)s",
      "libs/**/*.(t|j)s"
    ],
    "coverageDirectory": "./coverage",
    "testEnvironment": "node",
    "moduleNameMapper": {
      "^@libs/(.*)$": "<rootDir>/libs/$1",
      "^@apps/(.*)$": "<rootDir>/apps/$1"
    }
  }
}