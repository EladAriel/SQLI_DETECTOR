{
  "name": "n8n workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "sql-detection",
        "options": {}
      },
      "id": "a9877ef8-e313-4548-82de-5e410a24d170",
      "name": "Webhook - Start SQL Analysis",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1328,
        112
      ],
      "webhookId": "sql-detection-webhook"
    },
    {
      "parameters": {
        "jsCode": "// Extract and validate input data from webhook\nconst webhookData = $input.all()[0].json;\nconsole.log('üîç Webhook data received:', JSON.stringify(webhookData, null, 2));\n\n// Extract query from webhook data - check multiple possible locations\nconst inputQuery = (typeof webhookData.query === 'string' && webhookData.query) ||\n                  (typeof webhookData.body?.query === 'string' && webhookData.body?.query) ||\n                  (typeof webhookData.original_input?.body?.query === 'string' && webhookData.original_input?.body?.query) ||\n                  '';\n\n// Extract other parameters with defaults\nconst maxSources = webhookData.max_sources || webhookData.body?.max_sources || 5;\nconst includeScores = webhookData.include_scores || webhookData.body?.include_scores || true;\nconst contextType = webhookData.context_type || webhookData.body?.context_type || 'all';\n\n// Validate required fields\nif (!inputQuery || typeof inputQuery !== 'string' || inputQuery.trim() === '') {\n  throw new Error('SQL query is required and must be a non-empty string');\n}\n\nconst cleanQuery = inputQuery.trim();\n\n// Log the start of analysis\nconsole.log(`üîç Starting SQL injection analysis for query: ${cleanQuery.substring(0, 100)}...`);\nconsole.log(`üîç Query source: ${webhookData.query ? 'direct' : 'body'}`);\n\nreturn {\n  json: {\n    query: cleanQuery,\n    max_sources: maxSources,\n    include_scores: includeScores,\n    context_type: contextType,\n    analysis_id: `analysis_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n    timestamp: new Date().toISOString(),\n    step: '1_input_validation',\n    status: 'validated',\n    debug_extraction: {\n      webhook_query: webhookData.query,\n      body_query: webhookData.body?.query,\n      nested_body_query: webhookData.original_input?.body?.query,\n      selected_query: cleanQuery\n    }\n  }\n};"
      },
      "id": "8db567d8-289d-49ac-9e36-2e21b43dd410",
      "name": "Step 1: Input Validation & Processing",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1104,
        112
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://host.docker.internal:3002/api/v1/rag/analyze-sql",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "={{ $json.query }}"
            },
            {
              "name": "max_sources",
              "value": "={{ $json.max_sources }}"
            },
            {
              "name": "include_scores",
              "value": "={{ $json.include_scores }}"
            },
            {
              "name": "context_type",
              "value": "={{ $json.context_type }}"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          },
          "timeout": 30000
        }
      },
      "id": "152c5c54-e57f-4189-abe8-896f52f2d144",
      "name": "Step 2: RAG Analysis Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -880,
        112
      ]
    },
    {
      "parameters": {
        "jsCode": "// Process the RAG analysis response\nconst ragResponse = $input.all()[0].json;\n// Get the original input data from the previous step (Step 1 output)\nconst inputData = $node[\"Step 1: Input Validation & Processing\"].json;\n\n// Check for errors hidden in successful responses\nconst ragData = ragResponse.data || ragResponse;\nlet answer = ragData.answer || '';\n\n// DEMO MODE: Handle API key errors gracefully to allow demo to continue\nconst hasApiKeyError = answer.toLowerCase().includes('api key') ||\n    answer.toLowerCase().includes('authentication') ||\n    answer.toLowerCase().includes('unauthorized') ||\n    answer.toLowerCase().includes('401') ||\n    answer.toLowerCase().includes('403');\n\nif (hasApiKeyError) {\n  console.log('üîß DEMO MODE: API key error detected, providing fallback analysis');\n  answer = `DEMO FALLBACK ANALYSIS: This SQL query contains potential injection patterns. The query structure suggests possible vulnerability indicators including user input concatenation and lack of parameterization. Detected patterns: OR conditions, single quotes, potential boolean-based injection techniques. RISK LEVEL: HIGH. This is a simulated analysis for demonstration purposes.`;\n}\n\n// Detect other API errors (but allow the process to continue)\nif (answer.toLowerCase().includes('500')) {\n  console.log('üîß DEMO MODE: Server error detected, providing fallback analysis');\n  answer = `DEMO FALLBACK ANALYSIS: Server error occurred during analysis. Based on basic pattern matching, this query shows characteristics commonly associated with SQL injection attempts. Recommended immediate review and implementation of parameterized queries. RISK LEVEL: MEDIUM. This is a simulated analysis for demonstration purposes.`;\n}\n\n// Check for empty responses and provide fallback\nif (!answer || answer.trim() === '' || answer.toLowerCase().includes('i apologize')) {\n  console.log('üîß DEMO MODE: Empty response detected, providing fallback analysis');\n  answer = `DEMO FALLBACK ANALYSIS: Unable to complete full RAG analysis, but basic security assessment indicates this query should be reviewed for SQL injection vulnerabilities. Consider implementing input validation, parameterized queries, and principle of least privilege. RISK LEVEL: LOW. This is a simulated analysis for demonstration purposes.`;\n}\n\n// Log the RAG analysis results\nconsole.log(`üìä RAG Analysis completed for: ${inputData.analysis_id}`);\nconsole.log(`üéØ Answer: ${answer.substring(0, 200)}...`);\nconsole.log(`üìö Sources found: ${ragData.sources?.length || 0}`);\n\n// Extract key information\nconst vulnerabilityDetected = answer.toLowerCase().includes('injection') || \n                             answer.toLowerCase().includes('vulnerable') ||\n                             answer.toLowerCase().includes('risk');\n\nconst riskLevel = vulnerabilityDetected ? \n  (answer.toLowerCase().includes('high') ? 'HIGH' :\n   answer.toLowerCase().includes('medium') ? 'MEDIUM' : 'LOW') : 'NONE';\n\n// Format sources for easier consumption (use empty array if no sources available)\nconst formattedSources = ragData.sources?.map((source, index) => ({\n  id: index + 1,\n  content: source.content?.substring(0, 500) + '...',\n  metadata: source.metadata,\n  score: source.score,\n  relevance: source.score > 0.8 ? 'HIGH' : source.score > 0.6 ? 'MEDIUM' : 'LOW'\n})) || [];\n\nreturn {\n  json: {\n    analysis_id: inputData.analysis_id,\n    original_query: inputData.query,\n    rag_analysis: {\n      answer: answer,\n      vulnerability_detected: vulnerabilityDetected,\n      risk_level: riskLevel,\n      sources_count: formattedSources.length,\n      sources: formattedSources,\n      timestamp: ragData.timestamp || new Date().toISOString(),\n      demo_mode: hasApiKeyError || answer.includes('DEMO FALLBACK')\n    },\n    step: '2_rag_analysis',\n    status: 'completed'\n  }\n};"
      },
      "id": "cf508644-708e-4e7c-8449-bee2dedd17f4",
      "name": "Step 3: Process RAG Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -656,
        112
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://host.docker.internal:3001/api/v1/detection/analyze-query",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "={{ $json.original_query }}"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          },
          "timeout": 15000
        }
      },
      "id": "23eff6c4-c555-4311-92e8-9c9f7917b03e",
      "name": "Step 4: Traditional Detection API",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -464,
        112
      ]
    },
    {
      "parameters": {
        "jsCode": "// Combine RAG and traditional detection results\nconst inputs = $input.all();\nconsole.log(`üîó Step 5 received ${inputs.length} inputs`);\n\n// Get RAG data from Step 3 using node reference\nconst ragStepData = $node[\"Step 3: Process RAG Results\"].json;\nconst ragData = ragStepData.rag_analysis;\n\n// Get detection data from the current input (Step 4 output)\nconst detectionResponse = inputs[0].json;\nconst detectionData = detectionResponse.data || detectionResponse; // Handle nested data structure\n\nconsole.log(`üîó Combining analysis results for: ${ragStepData.analysis_id}`);\nconsole.log(`üîç RAG detected: ${ragData.vulnerability_detected}`);\nconsole.log(`üîç Traditional detected: ${detectionData.isVulnerable}`);\n\n// Compare results\nconst ragDetected = ragData.vulnerability_detected;\nconst traditionalDetected = detectionData.isVulnerable || false;\nconst agreement = ragDetected === traditionalDetected;\n\n// Determine final assessment\nconst finalRisk = ragDetected || traditionalDetected ? \n  Math.max(\n    ragData.risk_level === 'HIGH' ? 3 : ragData.risk_level === 'MEDIUM' ? 2 : ragData.risk_level === 'LOW' ? 1 : 0,\n    traditionalDetected ? 2 : 0\n  ) : 0;\n\nconst finalRiskLevel = finalRisk >= 3 ? 'HIGH' : finalRisk >= 2 ? 'MEDIUM' : finalRisk >= 1 ? 'LOW' : 'NONE';\n\n// Generate recommendations\nconst recommendations = [];\nif (ragDetected || traditionalDetected) {\n  recommendations.push('üö® Potential SQL injection vulnerability detected');\n  recommendations.push('üõ°Ô∏è Use parameterized queries/prepared statements');\n  recommendations.push('üîç Validate and sanitize all user inputs');\n  recommendations.push('üîí Apply principle of least privilege to database access');\n}\n\nif (ragData.sources_count > 0) {\n  recommendations.push(`üìö Found ${ragData.sources_count} relevant security patterns for reference`);\n}\n\n// Add traditional detection recommendations\nif (detectionData.recommendations && Array.isArray(detectionData.recommendations)) {\n  recommendations.push(...detectionData.recommendations.map(rec => `üîß ${rec}`));\n}\n\nreturn {\n  json: {\n    analysis_id: ragStepData.analysis_id,\n    query: ragStepData.original_query,\n    final_assessment: {\n      vulnerability_detected: ragDetected || traditionalDetected,\n      risk_level: finalRiskLevel,\n      confidence: agreement ? 'HIGH' : 'MEDIUM',\n      methods_agreement: agreement\n    },\n    rag_results: {\n      detected: ragDetected,\n      risk_level: ragData.risk_level,\n      answer: ragData.answer,\n      sources_used: ragData.sources_count,\n      top_sources: ragData.sources.slice(0, 3)\n    },\n    traditional_detection: {\n      detected: traditionalDetected,\n      score: detectionData.score || 0,\n      patterns_matched: detectionData.detectedPatterns || [],\n      risk_factors: detectionData.riskFactors || [],\n      severity: detectionData.severity || (traditionalDetected ? 'MEDIUM' : 'LOW')\n    },\n    recommendations: recommendations,\n    processing_time: {\n      total_ms: Date.now() - new Date(ragStepData.timestamp).getTime(),\n      completed_at: new Date().toISOString()\n    },\n    step: '4_final_analysis',\n    status: 'completed'\n  }\n};"
      },
      "id": "e0fd52a8-19fe-4db4-a3d6-62bb1de05060",
      "name": "Step 5: Combine & Analyze Results",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -224,
        112
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://host.docker.internal:3002/api/v1/rag/security-advice",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "=How to fix SQL injection in: {{ $json.query }}"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          },
          "timeout": 20000
        }
      },
      "id": "f4e77df6-fe8e-4cbf-aaaf-3a70afa0744b",
      "name": "Step 6: Get Security Advice (if vulnerable)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        0,
        112
      ],
      "executeOnce": false
    },
    {
      "parameters": {
        "jsCode": "// Generate final comprehensive report\nconst inputs = $input.all();\nconst analysisData = inputs[0].json;\nlet securityAdvice = inputs[1]?.json || null;\n\nconsole.log(`üìã Generating final report for: ${analysisData.analysis_id}`);\n\n// DEMO MODE: Handle security advice API errors gracefully\nif (securityAdvice && typeof securityAdvice.answer === 'string') {\n  const adviceText = securityAdvice.answer.toLowerCase();\n  if (adviceText.includes('api key') || adviceText.includes('authentication') || adviceText.includes('401') || adviceText.includes('403')) {\n    console.log('üîß DEMO MODE: Security advice API error detected, providing fallback advice');\n    securityAdvice = {\n      answer: `DEMO FALLBACK SECURITY ADVICE: To prevent SQL injection vulnerabilities like the one detected, implement these critical security measures: 1) Use parameterized queries/prepared statements exclusively 2) Validate and sanitize all user inputs 3) Apply principle of least privilege to database connections 4) Implement proper error handling that doesn't expose database structure 5) Use stored procedures with proper parameter handling 6) Regular security testing and code reviews. This is simulated advice for demonstration purposes.`,\n      sources: [{\n        content: 'Parameterized queries are the most effective defense against SQL injection attacks. They separate SQL code from user data, preventing malicious input from being interpreted as SQL commands.',\n        metadata: { type: 'security_pattern', priority: 'high' }\n      }]\n    };\n  }\n}\n\n// Create detailed report\nconst report = {\n  metadata: {\n    analysis_id: analysisData.analysis_id,\n    timestamp: new Date().toISOString(),\n    processing_time_ms: analysisData.processing_time?.total_ms || 0,\n    version: '1.0.0',\n    demo_mode: analysisData.rag_results?.demo_mode || false\n  },\n  query_analysis: {\n    original_query: analysisData.query,\n    query_length: analysisData.query?.length || 0,\n    contains_keywords: {\n      select: analysisData.query?.toLowerCase().includes('select') || false,\n      union: analysisData.query?.toLowerCase().includes('union') || false,\n      or_condition: analysisData.query?.toLowerCase().includes(\"or '1'='1\") || analysisData.query?.toLowerCase().includes('or 1=1') || false,\n      comment: (analysisData.query?.includes('--') || analysisData.query?.includes('/*')) || false\n    }\n  },\n  vulnerability_assessment: {\n    is_vulnerable: analysisData.final_assessment?.vulnerability_detected || false,\n    risk_level: analysisData.final_assessment?.risk_level || 'NONE',\n    confidence: analysisData.final_assessment?.confidence || 'UNKNOWN',\n    detection_methods: {\n      rag_detection: analysisData.rag_results?.detected || false,\n      traditional_detection: analysisData.traditional_detection?.detected || false,\n      methods_agree: analysisData.final_assessment?.methods_agreement || false\n    }\n  },\n  rag_insights: {\n    analysis_summary: (analysisData.rag_results?.answer?.substring(0, 500) + '...') || 'No RAG analysis available',\n    sources_consulted: analysisData.rag_results?.sources_used || 0,\n    relevant_patterns: (analysisData.rag_results?.top_sources || []).map(source => ({\n      content_preview: (source.content?.substring(0, 100) + '...') || 'No content',\n      relevance: source.relevance || 'UNKNOWN',\n      score: source.score || 0\n    }))\n  },\n  traditional_detection: {\n    score: analysisData.traditional_detection?.score || 0,\n    patterns_matched: analysisData.traditional_detection?.patterns_matched || [],\n    risk_factors: analysisData.traditional_detection?.risk_factors || [],\n    severity: analysisData.traditional_detection?.severity || 'UNKNOWN'\n  },\n  recommendations: analysisData.recommendations || [],\n  security_advice: securityAdvice ? {\n    detailed_advice: (securityAdvice.answer?.substring(0, 1000) + '...') || 'No security advice available',\n    preventive_measures: (securityAdvice.sources?.slice(0, 3) || []).map(s => (s.content?.substring(0, 200) + '...') || 'No content'),\n    advice_available: true\n  } : {\n    detailed_advice: 'Security advice temporarily unavailable - please refer to general SQL injection prevention guidelines',\n    preventive_measures: ['Use parameterized queries', 'Validate user inputs', 'Apply least privilege principle'],\n    advice_available: false\n  },\n  next_steps: [\n    'üîç Review the identified vulnerabilities',\n    'üõ†Ô∏è Implement recommended security measures', \n    'üß™ Test fixes with additional payloads',\n    'üìä Monitor for similar patterns in production',\n    'üìö Update security training based on findings'\n  ]\n};\n\n// Log summary\nconsole.log(`‚úÖ Analysis complete!`);\nconsole.log(`üéØ Vulnerability: ${report.vulnerability_assessment.is_vulnerable ? 'DETECTED' : 'NOT DETECTED'}`);\nconsole.log(`‚ö†Ô∏è Risk Level: ${report.vulnerability_assessment.risk_level}`);\nconsole.log(`üîó Methods Agreement: ${report.vulnerability_assessment.detection_methods.methods_agree}`);\nconsole.log(`üîß Demo Mode: ${report.metadata.demo_mode ? 'ENABLED' : 'DISABLED'}`);\n\nreturn { json: report };"
      },
      "id": "4bb261dd-3bc3-44a5-b795-93107ba0d7fe",
      "name": "Step 7: Generate Final Report",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        224,
        112
      ]
    },
    {
      "parameters": {
        "jsCode": "// Enhanced error handler with detailed error analysis\nconst inputData = $input.all()[0];\nconst error = inputData.error;\nconst json = inputData.json || {};\n\nconsole.error(`‚ùå Error in SQL injection analysis:`, error);\n\n// Analyze error type and provide specific guidance\nlet errorType = 'UNKNOWN';\nlet userMessage = 'Analysis failed due to an unexpected error';\nlet troubleshooting = [];\n\nif (error?.message) {\n  const errorMsg = error.message.toLowerCase();\n  \n  if (errorMsg.includes('api key') || errorMsg.includes('401') || errorMsg.includes('authentication')) {\n    errorType = 'API_AUTHENTICATION';\n    userMessage = 'OpenAI API authentication failed';\n    troubleshooting = [\n      'üîë Check OpenAI API key configuration',\n      'üí° Verify API key is valid and has sufficient credits',\n      'üîó Visit: https://platform.openai.com/account/api-keys',\n      '‚öôÔ∏è Update environment variables in your deployment'\n    ];\n  } else if (errorMsg.includes('timeout') || errorMsg.includes('network')) {\n    errorType = 'NETWORK_ERROR';\n    userMessage = 'Network or timeout error occurred';\n    troubleshooting = [\n      'üåê Check internet connectivity',\n      '‚è±Ô∏è API request may have timed out',\n      'üîÑ Try again in a few moments',\n      'üîç Verify API endpoints are accessible'\n    ];\n  } else if (errorMsg.includes('rate limit') || errorMsg.includes('429')) {\n    errorType = 'RATE_LIMITED';\n    userMessage = 'API rate limit exceeded';\n    troubleshooting = [\n      '‚è∞ Wait before making another request',\n      'üí≥ Check API usage limits',\n      'üìä Consider upgrading API plan'\n    ];\n  } else if (errorMsg.includes('query') || errorMsg.includes('validation')) {\n    errorType = 'INPUT_VALIDATION';\n    userMessage = 'Invalid input provided';\n    troubleshooting = [\n      'üìù Check SQL query format',\n      'üìè Ensure query length is within limits',\n      'üîç Verify required parameters are provided'\n    ];\n  }\n}\n\n// Create comprehensive error response\nconst errorResponse = {\n  error: true,\n  error_type: errorType,\n  message: userMessage,\n  technical_details: error?.message || 'Unknown error occurred',\n  analysis_id: json?.analysis_id || `error_${Date.now()}`,\n  timestamp: new Date().toISOString(),\n  step: 'error_handling',\n  troubleshooting: troubleshooting,\n  support_info: {\n    workflow_version: '1.0.0',\n    error_code: error?.code || 'ERR_UNKNOWN',\n    debug_trace: error?.stack?.split('\\n').slice(0, 3) || []\n  },\n  next_steps: [\n    'üîç Review the troubleshooting steps above',\n    '‚öôÔ∏è Check system configuration',\n    'üìû Contact support if issue persists',\n    'üìä Monitor system status'\n  ]\n};\n\nconsole.log(`üö® Error Type: ${errorType}`);\nconsole.log(`üí¨ User Message: ${userMessage}`);\n\nreturn { json: errorResponse };"
      },
      "id": "62abbe0c-3130-4791-9091-1356b200c899",
      "name": "Error Handler",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        192,
        528
      ]
    },
    {
      "parameters": {
        "content": "üìù INPUT VALIDATION\n‚Ä¢ Extract SQL query from webhook\n‚Ä¢ Validate required fields\n‚Ä¢ Set default parameters\n‚Ä¢ Generate unique analysis ID",
        "height": 144,
        "width": 224,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1184,
        272
      ],
      "typeVersion": 1,
      "id": "47b0e1dd-65fb-44d8-8db7-3827a887a758",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "ü§ñ RAG API CALL\n‚Ä¢ Send query to LangChain RAG service\n‚Ä¢ Request security analysis\n‚Ä¢ Include context parameters\n‚Ä¢ 30s timeout for AI response",
        "height": 144,
        "width": 224,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -944,
        -48
      ],
      "typeVersion": 1,
      "id": "89d6f27d-ab65-4fda-aa64-2c73a21f3d16",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "üîß RAG PROCESSING\n‚Ä¢ Parse AI analysis response\n‚Ä¢ Handle API key errors gracefully\n‚Ä¢ Extract vulnerability indicators\n‚Ä¢ Provide demo fallback if needed",
        "width": 224,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -720,
        272
      ],
      "typeVersion": 1,
      "id": "abd6c9dd-9bf6-4c57-9cb5-f78539436e88",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "üîç TRADITIONAL SCAN\n‚Ä¢ Call rule-based detection API\n‚Ä¢ Pattern matching analysis\n‚Ä¢ Quick vulnerability check\n‚Ä¢ 15s timeout",
        "height": 144,
        "width": 224,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -544,
        -48
      ],
      "typeVersion": 1,
      "id": "01a1471f-c4b5-4979-92ec-dc8c24125a7b",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "üîó RESULT FUSION\n‚Ä¢ Compare RAG vs Traditional results\n‚Ä¢ Calculate final risk level\n‚Ä¢ Generate recommendations\n‚Ä¢ Assess detection agreement",
        "height": 144,
        "width": 224,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -288,
        -48
      ],
      "typeVersion": 1,
      "id": "88354f0c-f554-4cde-9d54-276c65b47d04",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "üí° SECURITY ADVICE\n‚Ä¢ Request remediation guidance\n‚Ä¢ Get specific fix recommendations\n‚Ä¢ Only if vulnerability detected\n‚Ä¢ 20s timeout for detailed advice",
        "height": 144,
        "width": 224,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -48,
        -48
      ],
      "typeVersion": 1,
      "id": "4d20b4af-92e5-4876-80fb-cb005e39233d",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "content": "üìä FINAL REPORT\n‚Ä¢ Compile comprehensive analysis\n‚Ä¢ Include all detection methods\n‚Ä¢ Add security recommendations\n‚Ä¢ Format for presentation",
        "width": 224,
        "color": 2
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        192,
        304
      ],
      "typeVersion": 1,
      "id": "af876e8e-91fb-439f-bd57-1b7aba92a0d8",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "content": "‚ùå ERROR RECOVERY\n‚Ä¢ Catch workflow failures\n‚Ä¢ Analyze error types\n‚Ä¢ Provide troubleshooting steps\n‚Ä¢ Return structured error response",
        "width": 224,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -48,
        608
      ],
      "typeVersion": 1,
      "id": "d841c80e-05f6-41ce-bff0-2353eb201e83",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "content": "üéØ WEBHOOK TRIGGER\n‚Ä¢ Receive POST requests\n‚Ä¢ Entry point: /sql-detection\n‚Ä¢ Accept JSON payload\n‚Ä¢ Start analysis workflow",
        "height": 112,
        "width": 224,
        "color": 7
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1392,
        -32
      ],
      "typeVersion": 1,
      "id": "130f8355-a9b0-482b-b249-e97e3bc7eec9",
      "name": "Sticky Note8"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook - Start SQL Analysis": {
      "main": [
        [
          {
            "node": "Step 1: Input Validation & Processing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Step 1: Input Validation & Processing": {
      "main": [
        [
          {
            "node": "Step 2: RAG Analysis Request",
            "type": "main",
            "index": 0
          },
          {
            "node": "Error Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Step 2: RAG Analysis Request": {
      "main": [
        [
          {
            "node": "Step 3: Process RAG Results",
            "type": "main",
            "index": 0
          },
          {
            "node": "Error Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Step 3: Process RAG Results": {
      "main": [
        [
          {
            "node": "Step 4: Traditional Detection API",
            "type": "main",
            "index": 0
          },
          {
            "node": "Error Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Step 4: Traditional Detection API": {
      "main": [
        [
          {
            "node": "Step 5: Combine & Analyze Results",
            "type": "main",
            "index": 0
          },
          {
            "node": "Error Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Step 5: Combine & Analyze Results": {
      "main": [
        [
          {
            "node": "Step 6: Get Security Advice (if vulnerable)",
            "type": "main",
            "index": 0
          },
          {
            "node": "Error Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Step 6: Get Security Advice (if vulnerable)": {
      "main": [
        [
          {
            "node": "Step 7: Generate Final Report",
            "type": "main",
            "index": 0
          },
          {
            "node": "Error Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Step 7: Generate Final Report": {
      "main": [
        [
          {
            "node": "Error Handler",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "db86dae4-a992-4310-a7dc-e6851199d036",
  "meta": {
    "instanceId": "e627ba3cf413f5c8fbbcb0c34adbe72399de282a282eb839e23356d673f567eb"
  },
  "id": "uc3tu5mpEubY1cOA",
  "tags": [
    {
      "name": "sql-injection",
      "id": "Hys4RLa8teeHcPlA",
      "createdAt": "2025-08-11T13:01:01.260Z",
      "updatedAt": "2025-08-11T13:01:01.260Z"
    },
    {
      "name": "langchain",
      "id": "MUePs72yPESkywP8",
      "createdAt": "2025-08-11T13:01:01.286Z",
      "updatedAt": "2025-08-11T13:01:01.286Z"
    },
    {
      "name": "security",
      "id": "u8xMrMJNtxGTgvFB",
      "createdAt": "2025-08-11T13:01:01.232Z",
      "updatedAt": "2025-08-11T13:01:01.232Z"
    }
  ]
}