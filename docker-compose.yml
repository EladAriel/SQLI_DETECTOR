version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: sqli-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-sqli_detection}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secure_db_password_123}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - sqli-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # SQL Injection Detection API
  sqli-detection-api:
    build:
      context: .
      dockerfile: ./infrastructure/docker/Dockerfile.api
    container_name: sqli-detection-api
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${API_PORT:-3001}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-secure_db_password_123}@postgres:5432/${POSTGRES_DB:-sqli_detection}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-demo-key}
      JWT_SECRET: ${JWT_SECRET:-default_jwt_secret_change_me}
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - sqli-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/api/v1/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # LangChain RAG Service
  langchain-rag:
    build:
      context: .
      dockerfile: ./infrastructure/docker/Dockerfile.rag
    container_name: langchain-rag
    environment:
      NODE_ENV: ${NODE_ENV:-production}
      PORT: ${RAG_PORT:-3002}
      OPENAI_API_KEY: ${OPENAI_API_KEY:-demo-key}
      PINECONE_API_KEY: ${PINECONE_API_KEY:-demo-key}
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-secure_db_password_123}@postgres:5432/${POSTGRES_DB:-sqli_detection}
      PINECONE_ENVIRONMENT: ${PINECONE_ENVIRONMENT:-demo}
    ports:
      - "3002:3002"
    networks:
      - sqli-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3002/api/v1/rag/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # N8N Workflow Automation
  n8n:
    image: n8nio/n8n:latest
    container_name: sqli-n8n
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=${N8N_ADMIN_PASSWORD:-secure_n8n_admin_password}
      - N8N_HOST=0.0.0.0
      - N8N_PORT=5678
      - WEBHOOK_URL=http://localhost:5678/
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
      - ./infrastructure/n8n/workflows:/home/node/.n8n/workflows
    networks:
      - sqli-network
    depends_on:
      - sqli-detection-api
      - langchain-rag

  # Grafana for Monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: sqli-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-secure_grafana_admin_password}
      - GF_USERS_ALLOW_SIGN_UP=false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./infrastructure/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - sqli-network

  # Prometheus for Metrics Collection
  prometheus:
    image: prom/prometheus:latest
    container_name: sqli-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - sqli-network

  # Redis for Caching
  redis:
    image: redis:7-alpine
    container_name: sqli-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - sqli-network
    command: redis-server --appendonly yes

volumes:
  postgres_data:
  grafana_data:
  prometheus_data:
  n8n_data:
  redis_data:

networks:
  sqli-network:
    driver: bridge
